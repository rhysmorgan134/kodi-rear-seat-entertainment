{"version":3,"sources":["shared/constants.js","react/logo.svg","react/Card.js","react/CardList.js","react/SearchBox.js","react/Films.js","react/Scroll.js","react/App.js","serviceWorker.js","index.js"],"names":["module","exports","channels","APP_INFO","APP_CLOSE","Card","props","file","split","length","className","onClick","playMovie","alt","src","filetype","CardList","films","cardComponent","map","film","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ipcRenderer","window","App","onSearchChange","event","setState","searchField","target","value","quit","console","log","state","send","on","arg","fetch","method","headers","body","JSON","stringify","then","response","status","appName","appVersion","json","filmsRec","filteredFilms","this","filter","toLowerCase","includes","class","href","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qHAAAA,EAAOC,QAAU,CACbC,SAAU,CACRC,SAAU,WACVC,UAAW,e,yECHjBJ,EAAOC,QAAU,IAA0B,kC,sLCqB5BI,MAjBf,SAAcC,GACV,IAAIC,EAAOD,EAAMC,KAAKC,MAAM,KAE5B,OADAD,EAAOA,EAAKA,EAAKE,OAAQ,GAGrB,yBAAKC,UAAW,kFAAmFC,QAAS,kBAAML,EAAMM,UAAUL,KAC9H,yBAAKG,UAAW,iBACZ,yBAAKA,UAAU,YAAYG,IAAI,UAAUC,IAAI,4EAC7C,6BACI,sCAAYP,GACZ,qCAAWD,EAAMS,cCCtBC,MAXf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOL,EAAY,EAAZA,UAChBM,EAAgBD,EAAME,IAAI,SAACC,EAAMC,GACnC,OAAO,kBAAC,EAAD,CAAMd,KAAMU,EAAMI,GAAGd,KAAMQ,SAAUE,EAAMI,GAAGN,SAAUH,UAAWA,MAE9E,OACI,6BACKM,I,MCEEI,MATf,YAAoC,IAAhBC,EAAe,EAAfA,aAChB,OACI,yBAAKb,UAAW,QACZ,2BAAOA,UAAW,0CAA2Cc,KAAK,SAASC,YAAY,eAAeC,SAAUH,MCN/GN,EAAQ,CACjB,CACIV,KAAM,gBACNQ,SAAU,QAEd,CACIR,KAAM,kBACNQ,SAAU,QAEd,CACIR,KAAM,YACNQ,SAAU,S,MCDHY,MARf,SAAgBrB,GACZ,OACI,yBAAKsB,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAO,UAC9DzB,EAAM0B,WCEXC,EAAgBC,OAAhBD,YAqFOE,E,YAjFb,WAAY7B,GAAQ,IAAD,8BACjB,4CAAMA,KA4BV8B,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SA9BxB,EAiCrBC,KAAO,SAACL,GACJM,QAAQC,IAAI,EAAKC,OACjBZ,EAAYa,KAAK,EAAKD,MAAM3C,SAASE,WACrC6B,EAAYc,GAAI,EAAKF,MAAM3C,SAASE,UAAW,SAACiC,EAAOW,GACnDL,QAAQC,IAAIP,EAAOW,MArCN,EAyCrBpC,UAAY,SAACL,GACT0C,MAAM,6BAA8B,CAChCC,OAAQ,OACRC,QAAS,CACL,OAAW,mBACX,eAAiB,oBAErBC,KAAMC,KAAKC,UAAU,CACjBlC,KAAMb,MAGTgD,KAAK,SAACC,GACHb,QAAQC,IAAIY,EAASC,WAnD7B,EAAKZ,MAAQ,CACXa,QAAS,GACTC,WAAY,GACZ1C,MAAOA,EACPsB,YAAa,GACbrC,SAAUI,EAAMJ,UAEjByC,QAAQC,IAAItC,EAAMJ,UAClByC,QAAQC,IAAI,EAAKC,MAAM3C,UAVP,E,iFAsBE,IAAD,OAClByC,QAAQC,IAAIX,GACZgB,MAAM,+BACDM,KAAK,SAAAC,GAAQ,OAAGA,EAASI,SACzBL,KAAK,SAAAM,GAAQ,OAAI,EAAKvB,SAAS,CAACrB,MAAM4C,Q,+BA+BjC,IAAD,OAECC,EAAgBC,KAAKlB,MAAM5B,MAAM+C,OAAO,SAAA/C,GAC1C,OAAOA,EAAMV,KAAK0D,cAAcC,SAAS,EAAKrB,MAAMN,YAAY0B,iBAEpE,OACI,yBAAKvD,UAAW,MAEZ,wBAAIA,UAAW,QAAf,2BACA,kBAAC,EAAD,CAAWa,aAAcwC,KAAK3B,iBAC9B,uBAAG+B,MAAM,YAAYC,KAAK,mBAAmBzD,QAASoD,KAAKrB,MAA3D,QAIA,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUzB,MAAO6C,EAAelD,UAAWmD,KAAKnD,kB,GAzElDyD,IAAMC,WCEJC,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MACvB,2D,iBCTNC,IAASC,OAAO,kBAAC,EAAD,CAAK1E,SAAUA,aAAa2E,SAASC,eAAe,SDwH9D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC,iB","file":"static/js/main.6fdd3ff6.chunk.js","sourcesContent":["module.exports = {\n    channels: {\n      APP_INFO: 'app_info',\n      APP_CLOSE: 'app_close'\n    },\n  };","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './Card.css';\n\n\nfunction Card(props) {\n    var file = props.file.split(\"/\")\n    file = file[file.length -1]\n    return(\n\n        <div className={'flex items-center flex-column br3 pa3 ml5 mr5 mt2 mb2 grow bw2 shadow-5 tc card'} onClick={() => props.playMovie(file)}>\n            <div className={'flex flex-row'}>\n                <img className='image mr4' alt='noimage' src='http://www.gerdamuller.com.au/wp-content/uploads/2017/07/movie-reel.png'/>\n                <div >\n                    <h2>title: {file}</h2>\n                    <h2>type: {props.filetype}</h2>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from \"./Card\";\n\n\nfunction CardList({films, playMovie}) {\n    const cardComponent = films.map((film, i) => {\n        return <Card file={films[i].file} filetype={films[i].filetype} playMovie={playMovie}/>\n    })\n    return(\n        <div>\n            {cardComponent}\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\nimport './search.css';\n\nfunction SearchBox({searchChange}) {\n    return (\n        <div className={'pa2 '}>\n            <input className={'pa3 ba b--green bg-lightest-blue search'} type='search' placeholder='Search films' onChange={searchChange}/>\n        </div>\n\n    )\n}\n\nexport default SearchBox;","export const films = [\n    {\n        file: \"despicable me\",\n        filetype: \"film\"\n    },\n    {\n        file: \"despicable me 2\",\n        filetype: \"film\"\n    },\n    {\n        file: \"toy story\",\n        filetype: \"film\"\n    }\n]","import React from 'react';\n\nfunction Scroll(props) {\n    return (\n        <div style={{overflow: 'scroll', border: '1px solid black', height:'480px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React from 'react';\nimport logo from './logo.svg';\nimport CardList from \"./CardList\";\nimport SearchBox from './SearchBox.js';\nimport {films} from \"./Films\";\nimport './App.css';\nimport Scroll from \"./Scroll\";\nconst { ipcRenderer } = window;\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      appName: '',\n      appVersion: '',\n      films: films,\n      searchField: '',\n      channels: props.channels\n    };\n     console.log(props.channels)\n     console.log(this.state.channels)\n    // const channels = props.channels\n    // ipcRenderer.send(channels.APP_INFO);\n    // ipcRenderer.on(channels.APP_INFO, (event, arg) => {\n    //   ipcRenderer.removeAllListeners(channels.APP_INFO);\n    //   const { appName, appVersion } = arg;\n    //   this.setState({ appName, appVersion });\n    // });\n\n\n  }\n\n  componentDidMount() {\n    console.log(ipcRenderer)\n    fetch('http://localhost:3001/films')\n        .then(response=> response.json())\n        .then(filmsRec => this.setState({films:filmsRec}))\n}\n\nonSearchChange = (event) => {\n    this.setState({searchField: event.target.value})\n}\n\nquit = (event) => {\n    console.log(this.state)\n    ipcRenderer.send(this.state.channels.APP_CLOSE)\n    ipcRenderer.on (this.state.channels.APP_CLOSE, (event, arg) => {\n        console.log(event, arg)\n    })\n}\n\nplayMovie = (file) => {\n    fetch(\"http://localhost:3001/play\", {\n        method: \"POST\",\n        headers: {\n            \"Accept\" : \"application/json\",\n            \"content-type\" : \"application/json\"\n        },\n        body: JSON.stringify({\n            film: file\n        })\n    })\n        .then((response) => {\n            console.log(response.status)\n        })\n}\n\n    render() {\n\n        const filteredFilms = this.state.films.filter(films => {\n            return films.file.toLowerCase().includes(this.state.searchField.toLowerCase());\n        })\n        return (\n            <div className={'tc'}>\n\n                <h1 className={'topH'}>Rear Seat Entertainment</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <a class=\"example_a\" href=\"add-website-here\" onClick={this.quit}>quit</a>\n                {/* <button onClick={this.quit}>\n                    Click me!\n                </button> */}\n                <Scroll>\n                    <CardList films={filteredFilms} playMovie={this.playMovie}/>\n                </Scroll>\n            </div>\n\n        )\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './react/App';\nimport * as serviceWorker from './serviceWorker';\nimport { channels } from './shared/constants';\nimport 'tachyons';\n\n\nReactDOM.render(<App channels={channels}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}